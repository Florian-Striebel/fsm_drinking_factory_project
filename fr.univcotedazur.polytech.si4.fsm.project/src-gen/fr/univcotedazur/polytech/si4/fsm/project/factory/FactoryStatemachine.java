/** Generated by YAKINDU Statechart Tools code generator. */
package fr.univcotedazur.polytech.si4.fsm.project.factory;

import fr.univcotedazur.polytech.si4.fsm.project.ITimer;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;

public class FactoryStatemachine implements IFactoryStatemachine {
	protected class SCInterfaceImpl implements SCInterface {
	
		private List<SCInterfaceListener> listeners = new LinkedList<SCInterfaceListener>();
		
		public List<SCInterfaceListener> getListeners() {
			return listeners;
		}
		private boolean doAction;
		
		
		public void raiseDoAction() {
			synchronized(FactoryStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							doAction = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean paidNFC;
		
		
		public void raisePaidNFC() {
			synchronized(FactoryStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							paidNFC = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean selected;
		
		
		public void raiseSelected() {
			synchronized(FactoryStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							selected = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean addCoin;
		
		
		public void raiseAddCoin() {
			synchronized(FactoryStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							addCoin = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean cancel;
		
		
		public void raiseCancel() {
			synchronized(FactoryStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							cancel = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean moneyBack;
		
		
		public void raiseMoneyBack() {
			synchronized(FactoryStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							moneyBack = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean refunded;
		
		
		public void raiseRefunded() {
			synchronized(FactoryStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							refunded = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean preparationFinished;
		
		
		public void raisePreparationFinished() {
			synchronized(FactoryStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							preparationFinished = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean takeDrink;
		
		
		public void raiseTakeDrink() {
			synchronized(FactoryStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							takeDrink = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean startBar;
		
		
		public void raiseStartBar() {
			synchronized(FactoryStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							startBar = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean addCup;
		
		
		public void raiseAddCup() {
			synchronized(FactoryStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							addCup = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean addedCup;
		
		
		public boolean isRaisedAddedCup() {
			synchronized(FactoryStatemachine.this) {
				return addedCup;
			}
		}
		
		protected void raiseAddedCup() {
			synchronized(FactoryStatemachine.this) {
				addedCup = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onAddedCupRaised();
				}
			}
		}
		
		private boolean doTakeDrink;
		
		
		public boolean isRaisedDoTakeDrink() {
			synchronized(FactoryStatemachine.this) {
				return doTakeDrink;
			}
		}
		
		protected void raiseDoTakeDrink() {
			synchronized(FactoryStatemachine.this) {
				doTakeDrink = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onDoTakeDrinkRaised();
				}
			}
		}
		
		private boolean doRefund;
		
		
		public boolean isRaisedDoRefund() {
			synchronized(FactoryStatemachine.this) {
				return doRefund;
			}
		}
		
		protected void raiseDoRefund() {
			synchronized(FactoryStatemachine.this) {
				doRefund = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onDoRefundRaised();
				}
			}
		}
		
		private boolean doRestart;
		
		
		public boolean isRaisedDoRestart() {
			synchronized(FactoryStatemachine.this) {
				return doRestart;
			}
		}
		
		protected void raiseDoRestart() {
			synchronized(FactoryStatemachine.this) {
				doRestart = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onDoRestartRaised();
				}
			}
		}
		
		private boolean doClean;
		
		
		public boolean isRaisedDoClean() {
			synchronized(FactoryStatemachine.this) {
				return doClean;
			}
		}
		
		protected void raiseDoClean() {
			synchronized(FactoryStatemachine.this) {
				doClean = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onDoCleanRaised();
				}
			}
		}
		
		private boolean doPaymentByNFC;
		
		
		public boolean isRaisedDoPaymentByNFC() {
			synchronized(FactoryStatemachine.this) {
				return doPaymentByNFC;
			}
		}
		
		protected void raiseDoPaymentByNFC() {
			synchronized(FactoryStatemachine.this) {
				doPaymentByNFC = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onDoPaymentByNFCRaised();
				}
			}
		}
		
		private boolean doBackCoin;
		
		
		public boolean isRaisedDoBackCoin() {
			synchronized(FactoryStatemachine.this) {
				return doBackCoin;
			}
		}
		
		protected void raiseDoBackCoin() {
			synchronized(FactoryStatemachine.this) {
				doBackCoin = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onDoBackCoinRaised();
				}
			}
		}
		
		private boolean doMoneyBack;
		
		
		public boolean isRaisedDoMoneyBack() {
			synchronized(FactoryStatemachine.this) {
				return doMoneyBack;
			}
		}
		
		protected void raiseDoMoneyBack() {
			synchronized(FactoryStatemachine.this) {
				doMoneyBack = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onDoMoneyBackRaised();
				}
			}
		}
		
		private boolean doStartPreparation;
		
		
		public boolean isRaisedDoStartPreparation() {
			synchronized(FactoryStatemachine.this) {
				return doStartPreparation;
			}
		}
		
		protected void raiseDoStartPreparation() {
			synchronized(FactoryStatemachine.this) {
				doStartPreparation = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onDoStartPreparationRaised();
				}
			}
		}
		
		private boolean doSelection;
		
		
		public boolean isRaisedDoSelection() {
			synchronized(FactoryStatemachine.this) {
				return doSelection;
			}
		}
		
		protected void raiseDoSelection() {
			synchronized(FactoryStatemachine.this) {
				doSelection = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onDoSelectionRaised();
				}
			}
		}
		
		private boolean addedCoin;
		
		
		public boolean isRaisedAddedCoin() {
			synchronized(FactoryStatemachine.this) {
				return addedCoin;
			}
		}
		
		protected void raiseAddedCoin() {
			synchronized(FactoryStatemachine.this) {
				addedCoin = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onAddedCoinRaised();
				}
			}
		}
		
		private boolean doPreparation;
		
		
		public boolean isRaisedDoPreparation() {
			synchronized(FactoryStatemachine.this) {
				return doPreparation;
			}
		}
		
		protected void raiseDoPreparation() {
			synchronized(FactoryStatemachine.this) {
				doPreparation = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onDoPreparationRaised();
				}
			}
		}
		
		private boolean increaseBar;
		
		
		public boolean isRaisedIncreaseBar() {
			synchronized(FactoryStatemachine.this) {
				return increaseBar;
			}
		}
		
		protected void raiseIncreaseBar() {
			synchronized(FactoryStatemachine.this) {
				increaseBar = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onIncreaseBarRaised();
				}
			}
		}
		
		private boolean isSelected;
		
		public synchronized boolean getIsSelected() {
			synchronized(FactoryStatemachine.this) {
				return isSelected;
			}
		}
		
		public void setIsSelected(boolean value) {
			synchronized(FactoryStatemachine.this) {
				this.isSelected = value;
			}
		}
		
		private boolean isPaid;
		
		public synchronized boolean getIsPaid() {
			synchronized(FactoryStatemachine.this) {
				return isPaid;
			}
		}
		
		public void setIsPaid(boolean value) {
			synchronized(FactoryStatemachine.this) {
				this.isPaid = value;
			}
		}
		
		private boolean isValidate;
		
		public synchronized boolean getIsValidate() {
			synchronized(FactoryStatemachine.this) {
				return isValidate;
			}
		}
		
		public void setIsValidate(boolean value) {
			synchronized(FactoryStatemachine.this) {
				this.isValidate = value;
			}
		}
		
		private long timeToUpdateBar;
		
		public synchronized long getTimeToUpdateBar() {
			synchronized(FactoryStatemachine.this) {
				return timeToUpdateBar;
			}
		}
		
		public void setTimeToUpdateBar(long value) {
			synchronized(FactoryStatemachine.this) {
				this.timeToUpdateBar = value;
			}
		}
		
		protected void clearEvents() {
			doAction = false;
			paidNFC = false;
			selected = false;
			addCoin = false;
			cancel = false;
			moneyBack = false;
			refunded = false;
			preparationFinished = false;
			takeDrink = false;
			startBar = false;
			addCup = false;
		}
		protected void clearOutEvents() {
		
		addedCup = false;
		doTakeDrink = false;
		doRefund = false;
		doRestart = false;
		doClean = false;
		doPaymentByNFC = false;
		doBackCoin = false;
		doMoneyBack = false;
		doStartPreparation = false;
		doSelection = false;
		addedCoin = false;
		doPreparation = false;
		increaseBar = false;
		}
		
	}
	
	
	protected SCInterfaceImpl sCInterface;
	
	private boolean initialized = false;
	
	public enum State {
		main_region_Ready,
		main_region_Ready_r1_Timer,
		main_region_Ready_r1_waitingAction,
		main_region_Ready_r2_ordering,
		main_region_Ready_r2_ordering_r3_waitingSelection,
		main_region_Ready_r2_ordering_r3_selected,
		main_region_Ready_r2_ordering_r4_waitingPayment,
		main_region_Ready_r2_ordering_r4_paidByNFC,
		main_region_Ready_r2_ordering_r4_paidWithCoin,
		main_region_Ready_r2_giveChange,
		main_region_refund,
		main_region_clean,
		main_region_waitingTake,
		main_region_preparation,
		main_region_preparation_r1_drinkPreparation,
		main_region_preparation_r2_progressBar,
		main_region_preparation_r2_waittingStartPreparation,
		$NullState$
	};
	
	private final State[] stateVector = new State[3];
	
	private int nextStateIndex;
	
	private ITimer timer;
	
	private final boolean[] timeEvents = new boolean[5];
	
	private BlockingQueue<Runnable> inEventQueue = new LinkedBlockingQueue<Runnable>();
	private boolean isRunningCycle = false;
	public FactoryStatemachine() {
		sCInterface = new SCInterfaceImpl();
	}
	
	public synchronized void init() {
		this.initialized = true;
		if (timer == null) {
			throw new IllegalStateException("timer not set.");
		}
		for (int i = 0; i < 3; i++) {
			stateVector[i] = State.$NullState$;
		}
		clearEvents();
		clearOutEvents();
		sCInterface.setIsSelected(false);
		
		sCInterface.setIsPaid(false);
		
		sCInterface.setIsValidate(false);
		
		sCInterface.setTimeToUpdateBar(0);
	}
	
	public synchronized void enter() {
		if (!initialized) {
			throw new IllegalStateException(
				"The state machine needs to be initialized first by calling the init() function."
			);
		}
		if (timer == null) {
			throw new IllegalStateException("timer not set.");
		}
		enterSequence_main_region_default();
	}
	
	public synchronized void runCycle() {
		if (!initialized)
			throw new IllegalStateException(
					"The state machine needs to be initialized first by calling the init() function.");
		
		if (isRunningCycle) {
			return;
		}
		isRunningCycle = true;
		
		clearOutEvents();
	
		Runnable task = getNextEvent();
		if (task == null) {
			task = getDefaultEvent();
		}
		
		while (task != null) {
			task.run();
			clearEvents();
			task = getNextEvent();
		}
		
		isRunningCycle = false;
	}
	
	protected synchronized void singleCycle() {
		for (nextStateIndex = 0; nextStateIndex < stateVector.length; nextStateIndex++) {
			switch (stateVector[nextStateIndex]) {
			case main_region_Ready_r1_Timer:
				main_region_Ready_r1_Timer_react(true);
				break;
			case main_region_Ready_r1_waitingAction:
				main_region_Ready_r1_waitingAction_react(true);
				break;
			case main_region_Ready_r2_ordering_r3_waitingSelection:
				main_region_Ready_r2_ordering_r3_waitingSelection_react(true);
				break;
			case main_region_Ready_r2_ordering_r3_selected:
				main_region_Ready_r2_ordering_r3_selected_react(true);
				break;
			case main_region_Ready_r2_ordering_r4_waitingPayment:
				main_region_Ready_r2_ordering_r4_waitingPayment_react(true);
				break;
			case main_region_Ready_r2_ordering_r4_paidByNFC:
				main_region_Ready_r2_ordering_r4_paidByNFC_react(true);
				break;
			case main_region_Ready_r2_ordering_r4_paidWithCoin:
				main_region_Ready_r2_ordering_r4_paidWithCoin_react(true);
				break;
			case main_region_Ready_r2_giveChange:
				main_region_Ready_r2_giveChange_react(true);
				break;
			case main_region_refund:
				main_region_refund_react(true);
				break;
			case main_region_clean:
				main_region_clean_react(true);
				break;
			case main_region_waitingTake:
				main_region_waitingTake_react(true);
				break;
			case main_region_preparation_r1_drinkPreparation:
				main_region_preparation_r1_drinkPreparation_react(true);
				break;
			case main_region_preparation_r2_progressBar:
				main_region_preparation_r2_progressBar_react(true);
				break;
			case main_region_preparation_r2_waittingStartPreparation:
				main_region_preparation_r2_waittingStartPreparation_react(true);
				break;
			default:
				// $NullState$
			}
		}
	}
	
	protected Runnable getNextEvent() {
		if(!inEventQueue.isEmpty()) {
			return inEventQueue.poll();
		}
		return null;
	}
	
	protected Runnable getDefaultEvent() {
		return new Runnable() {
			@Override
			public void run() {
				singleCycle();
			}
		};
	}
	
	public synchronized void exit() {
		exitSequence_main_region();
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public synchronized boolean isActive() {
		return stateVector[0] != State.$NullState$||stateVector[1] != State.$NullState$||stateVector[2] != State.$NullState$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public synchronized boolean isFinal() {
		return false;
	}
	/**
	* This method resets the incoming events (time events included).
	*/
	protected void clearEvents() {
		sCInterface.clearEvents();
		for (int i=0; i<timeEvents.length; i++) {
			timeEvents[i] = false;
		}
	}
	
	/**
	* This method resets the outgoing events.
	*/
	protected void clearOutEvents() {
		sCInterface.clearOutEvents();
	}
	
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public synchronized boolean isStateActive(State state) {
	
		switch (state) {
		case main_region_Ready:
			return stateVector[0].ordinal() >= State.
					main_region_Ready.ordinal()&& stateVector[0].ordinal() <= State.main_region_Ready_r2_giveChange.ordinal();
		case main_region_Ready_r1_Timer:
			return stateVector[0] == State.main_region_Ready_r1_Timer;
		case main_region_Ready_r1_waitingAction:
			return stateVector[0] == State.main_region_Ready_r1_waitingAction;
		case main_region_Ready_r2_ordering:
			return stateVector[1].ordinal() >= State.
					main_region_Ready_r2_ordering.ordinal()&& stateVector[1].ordinal() <= State.main_region_Ready_r2_ordering_r4_paidWithCoin.ordinal();
		case main_region_Ready_r2_ordering_r3_waitingSelection:
			return stateVector[1] == State.main_region_Ready_r2_ordering_r3_waitingSelection;
		case main_region_Ready_r2_ordering_r3_selected:
			return stateVector[1] == State.main_region_Ready_r2_ordering_r3_selected;
		case main_region_Ready_r2_ordering_r4_waitingPayment:
			return stateVector[2] == State.main_region_Ready_r2_ordering_r4_waitingPayment;
		case main_region_Ready_r2_ordering_r4_paidByNFC:
			return stateVector[2] == State.main_region_Ready_r2_ordering_r4_paidByNFC;
		case main_region_Ready_r2_ordering_r4_paidWithCoin:
			return stateVector[2] == State.main_region_Ready_r2_ordering_r4_paidWithCoin;
		case main_region_Ready_r2_giveChange:
			return stateVector[1] == State.main_region_Ready_r2_giveChange;
		case main_region_refund:
			return stateVector[0] == State.main_region_refund;
		case main_region_clean:
			return stateVector[0] == State.main_region_clean;
		case main_region_waitingTake:
			return stateVector[0] == State.main_region_waitingTake;
		case main_region_preparation:
			return stateVector[0].ordinal() >= State.
					main_region_preparation.ordinal()&& stateVector[0].ordinal() <= State.main_region_preparation_r2_waittingStartPreparation.ordinal();
		case main_region_preparation_r1_drinkPreparation:
			return stateVector[0] == State.main_region_preparation_r1_drinkPreparation;
		case main_region_preparation_r2_progressBar:
			return stateVector[1] == State.main_region_preparation_r2_progressBar;
		case main_region_preparation_r2_waittingStartPreparation:
			return stateVector[1] == State.main_region_preparation_r2_waittingStartPreparation;
		default:
			return false;
		}
	}
	
	/**
	* Set the {@link ITimer} for the state machine. It must be set
	* externally on a timed state machine before a run cycle can be correctly
	* executed.
	* 
	* @param timer
	*/
	public synchronized void setTimer(ITimer timer) {
		this.timer = timer;
	}
	
	/**
	* Returns the currently used timer.
	* 
	* @return {@link ITimer}
	*/
	public ITimer getTimer() {
		return timer;
	}
	
	public synchronized void timeElapsed(int eventID) {
		inEventQueue.add(new Runnable() {
			@Override
			public void run() {
				timeEvents[eventID] = true;
				singleCycle();
			}
		});
		runCycle();
	}
	
	public SCInterface getSCInterface() {
		return sCInterface;
	}
	
	public synchronized void raiseDoAction() {
		sCInterface.raiseDoAction();
	}
	
	public synchronized void raisePaidNFC() {
		sCInterface.raisePaidNFC();
	}
	
	public synchronized void raiseSelected() {
		sCInterface.raiseSelected();
	}
	
	public synchronized void raiseAddCoin() {
		sCInterface.raiseAddCoin();
	}
	
	public synchronized void raiseCancel() {
		sCInterface.raiseCancel();
	}
	
	public synchronized void raiseMoneyBack() {
		sCInterface.raiseMoneyBack();
	}
	
	public synchronized void raiseRefunded() {
		sCInterface.raiseRefunded();
	}
	
	public synchronized void raisePreparationFinished() {
		sCInterface.raisePreparationFinished();
	}
	
	public synchronized void raiseTakeDrink() {
		sCInterface.raiseTakeDrink();
	}
	
	public synchronized void raiseStartBar() {
		sCInterface.raiseStartBar();
	}
	
	public synchronized void raiseAddCup() {
		sCInterface.raiseAddCup();
	}
	
	public synchronized boolean isRaisedAddedCup() {
		return sCInterface.isRaisedAddedCup();
	}
	
	public synchronized boolean isRaisedDoTakeDrink() {
		return sCInterface.isRaisedDoTakeDrink();
	}
	
	public synchronized boolean isRaisedDoRefund() {
		return sCInterface.isRaisedDoRefund();
	}
	
	public synchronized boolean isRaisedDoRestart() {
		return sCInterface.isRaisedDoRestart();
	}
	
	public synchronized boolean isRaisedDoClean() {
		return sCInterface.isRaisedDoClean();
	}
	
	public synchronized boolean isRaisedDoPaymentByNFC() {
		return sCInterface.isRaisedDoPaymentByNFC();
	}
	
	public synchronized boolean isRaisedDoBackCoin() {
		return sCInterface.isRaisedDoBackCoin();
	}
	
	public synchronized boolean isRaisedDoMoneyBack() {
		return sCInterface.isRaisedDoMoneyBack();
	}
	
	public synchronized boolean isRaisedDoStartPreparation() {
		return sCInterface.isRaisedDoStartPreparation();
	}
	
	public synchronized boolean isRaisedDoSelection() {
		return sCInterface.isRaisedDoSelection();
	}
	
	public synchronized boolean isRaisedAddedCoin() {
		return sCInterface.isRaisedAddedCoin();
	}
	
	public synchronized boolean isRaisedDoPreparation() {
		return sCInterface.isRaisedDoPreparation();
	}
	
	public synchronized boolean isRaisedIncreaseBar() {
		return sCInterface.isRaisedIncreaseBar();
	}
	
	public synchronized boolean getIsSelected() {
		return sCInterface.getIsSelected();
	}
	
	public synchronized void setIsSelected(boolean value) {
		sCInterface.setIsSelected(value);
	}
	
	public synchronized boolean getIsPaid() {
		return sCInterface.getIsPaid();
	}
	
	public synchronized void setIsPaid(boolean value) {
		sCInterface.setIsPaid(value);
	}
	
	public synchronized boolean getIsValidate() {
		return sCInterface.getIsValidate();
	}
	
	public synchronized void setIsValidate(boolean value) {
		sCInterface.setIsValidate(value);
	}
	
	public synchronized long getTimeToUpdateBar() {
		return sCInterface.getTimeToUpdateBar();
	}
	
	public synchronized void setTimeToUpdateBar(long value) {
		sCInterface.setTimeToUpdateBar(value);
	}
	
	/* Entry action for state 'Timer'. */
	private void entryAction_main_region_Ready_r1_Timer() {
		timer.setTimer(this, 0, (45 * 1000), false);
	}
	
	/* Entry action for state 'selected'. */
	private void entryAction_main_region_Ready_r2_ordering_r3_selected() {
		sCInterface.raiseDoSelection();
	}
	
	/* Entry action for state 'refund'. */
	private void entryAction_main_region_refund() {
		timer.setTimer(this, 1, (5 * 1000), false);
	}
	
	/* Entry action for state 'clean'. */
	private void entryAction_main_region_clean() {
		timer.setTimer(this, 2, (2 * 1000), false);
	}
	
	/* Entry action for state 'drinkPreparation'. */
	private void entryAction_main_region_preparation_r1_drinkPreparation() {
		timer.setTimer(this, 3, (3 * 1000), false);
		
		sCInterface.raiseDoStartPreparation();
	}
	
	/* Entry action for state 'progressBar'. */
	private void entryAction_main_region_preparation_r2_progressBar() {
		timer.setTimer(this, 4, sCInterface.getTimeToUpdateBar(), true);
	}
	
	/* Exit action for state 'Timer'. */
	private void exitAction_main_region_Ready_r1_Timer() {
		timer.unsetTimer(this, 0);
	}
	
	/* Exit action for state 'refund'. */
	private void exitAction_main_region_refund() {
		timer.unsetTimer(this, 1);
	}
	
	/* Exit action for state 'clean'. */
	private void exitAction_main_region_clean() {
		timer.unsetTimer(this, 2);
	}
	
	/* Exit action for state 'drinkPreparation'. */
	private void exitAction_main_region_preparation_r1_drinkPreparation() {
		timer.unsetTimer(this, 3);
	}
	
	/* Exit action for state 'progressBar'. */
	private void exitAction_main_region_preparation_r2_progressBar() {
		timer.unsetTimer(this, 4);
	}
	
	/* 'default' enter sequence for state Ready */
	private void enterSequence_main_region_Ready_default() {
		enterSequence_main_region_Ready_r1_default();
		enterSequence_main_region_Ready_r2_default();
	}
	
	/* 'default' enter sequence for state Timer */
	private void enterSequence_main_region_Ready_r1_Timer_default() {
		entryAction_main_region_Ready_r1_Timer();
		nextStateIndex = 0;
		stateVector[0] = State.main_region_Ready_r1_Timer;
	}
	
	/* 'default' enter sequence for state waitingAction */
	private void enterSequence_main_region_Ready_r1_waitingAction_default() {
		nextStateIndex = 0;
		stateVector[0] = State.main_region_Ready_r1_waitingAction;
	}
	
	/* 'default' enter sequence for state ordering */
	private void enterSequence_main_region_Ready_r2_ordering_default() {
		enterSequence_main_region_Ready_r2_ordering_r3_default();
		enterSequence_main_region_Ready_r2_ordering_r4_default();
	}
	
	/* 'default' enter sequence for state waitingSelection */
	private void enterSequence_main_region_Ready_r2_ordering_r3_waitingSelection_default() {
		nextStateIndex = 1;
		stateVector[1] = State.main_region_Ready_r2_ordering_r3_waitingSelection;
	}
	
	/* 'default' enter sequence for state selected */
	private void enterSequence_main_region_Ready_r2_ordering_r3_selected_default() {
		entryAction_main_region_Ready_r2_ordering_r3_selected();
		nextStateIndex = 1;
		stateVector[1] = State.main_region_Ready_r2_ordering_r3_selected;
	}
	
	/* 'default' enter sequence for state waitingPayment */
	private void enterSequence_main_region_Ready_r2_ordering_r4_waitingPayment_default() {
		nextStateIndex = 2;
		stateVector[2] = State.main_region_Ready_r2_ordering_r4_waitingPayment;
	}
	
	/* 'default' enter sequence for state paidByNFC */
	private void enterSequence_main_region_Ready_r2_ordering_r4_paidByNFC_default() {
		nextStateIndex = 2;
		stateVector[2] = State.main_region_Ready_r2_ordering_r4_paidByNFC;
	}
	
	/* 'default' enter sequence for state paidWithCoin */
	private void enterSequence_main_region_Ready_r2_ordering_r4_paidWithCoin_default() {
		nextStateIndex = 2;
		stateVector[2] = State.main_region_Ready_r2_ordering_r4_paidWithCoin;
	}
	
	/* 'default' enter sequence for state giveChange */
	private void enterSequence_main_region_Ready_r2_giveChange_default() {
		nextStateIndex = 1;
		stateVector[1] = State.main_region_Ready_r2_giveChange;
	}
	
	/* 'default' enter sequence for state refund */
	private void enterSequence_main_region_refund_default() {
		entryAction_main_region_refund();
		nextStateIndex = 0;
		stateVector[0] = State.main_region_refund;
	}
	
	/* 'default' enter sequence for state clean */
	private void enterSequence_main_region_clean_default() {
		entryAction_main_region_clean();
		nextStateIndex = 0;
		stateVector[0] = State.main_region_clean;
	}
	
	/* 'default' enter sequence for state waitingTake */
	private void enterSequence_main_region_waitingTake_default() {
		nextStateIndex = 0;
		stateVector[0] = State.main_region_waitingTake;
	}
	
	/* 'default' enter sequence for state preparation */
	private void enterSequence_main_region_preparation_default() {
		enterSequence_main_region_preparation_r1_default();
		enterSequence_main_region_preparation_r2_default();
	}
	
	/* 'default' enter sequence for state drinkPreparation */
	private void enterSequence_main_region_preparation_r1_drinkPreparation_default() {
		entryAction_main_region_preparation_r1_drinkPreparation();
		nextStateIndex = 0;
		stateVector[0] = State.main_region_preparation_r1_drinkPreparation;
	}
	
	/* 'default' enter sequence for state progressBar */
	private void enterSequence_main_region_preparation_r2_progressBar_default() {
		entryAction_main_region_preparation_r2_progressBar();
		nextStateIndex = 1;
		stateVector[1] = State.main_region_preparation_r2_progressBar;
	}
	
	/* 'default' enter sequence for state waittingStartPreparation */
	private void enterSequence_main_region_preparation_r2_waittingStartPreparation_default() {
		nextStateIndex = 1;
		stateVector[1] = State.main_region_preparation_r2_waittingStartPreparation;
	}
	
	/* 'default' enter sequence for region main region */
	private void enterSequence_main_region_default() {
		react_main_region__entry_Default();
	}
	
	/* 'default' enter sequence for region r1 */
	private void enterSequence_main_region_Ready_r1_default() {
		react_main_region_Ready_r1__entry_Default();
	}
	
	/* 'default' enter sequence for region r2 */
	private void enterSequence_main_region_Ready_r2_default() {
		react_main_region_Ready_r2__entry_Default();
	}
	
	/* 'default' enter sequence for region r3 */
	private void enterSequence_main_region_Ready_r2_ordering_r3_default() {
		react_main_region_Ready_r2_ordering_r3__entry_Default();
	}
	
	/* 'default' enter sequence for region r4 */
	private void enterSequence_main_region_Ready_r2_ordering_r4_default() {
		react_main_region_Ready_r2_ordering_r4__entry_Default();
	}
	
	/* 'default' enter sequence for region r1 */
	private void enterSequence_main_region_preparation_r1_default() {
		react_main_region_preparation_r1__entry_Default();
	}
	
	/* 'default' enter sequence for region r2 */
	private void enterSequence_main_region_preparation_r2_default() {
		react_main_region_preparation_r2__entry_Default();
	}
	
	/* Default exit sequence for state Ready */
	private void exitSequence_main_region_Ready() {
		exitSequence_main_region_Ready_r1();
		exitSequence_main_region_Ready_r2();
	}
	
	/* Default exit sequence for state Timer */
	private void exitSequence_main_region_Ready_r1_Timer() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_main_region_Ready_r1_Timer();
	}
	
	/* Default exit sequence for state waitingAction */
	private void exitSequence_main_region_Ready_r1_waitingAction() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state ordering */
	private void exitSequence_main_region_Ready_r2_ordering() {
		exitSequence_main_region_Ready_r2_ordering_r3();
		exitSequence_main_region_Ready_r2_ordering_r4();
	}
	
	/* Default exit sequence for state waitingSelection */
	private void exitSequence_main_region_Ready_r2_ordering_r3_waitingSelection() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
	}
	
	/* Default exit sequence for state selected */
	private void exitSequence_main_region_Ready_r2_ordering_r3_selected() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
	}
	
	/* Default exit sequence for state waitingPayment */
	private void exitSequence_main_region_Ready_r2_ordering_r4_waitingPayment() {
		nextStateIndex = 2;
		stateVector[2] = State.$NullState$;
	}
	
	/* Default exit sequence for state paidByNFC */
	private void exitSequence_main_region_Ready_r2_ordering_r4_paidByNFC() {
		nextStateIndex = 2;
		stateVector[2] = State.$NullState$;
	}
	
	/* Default exit sequence for state paidWithCoin */
	private void exitSequence_main_region_Ready_r2_ordering_r4_paidWithCoin() {
		nextStateIndex = 2;
		stateVector[2] = State.$NullState$;
	}
	
	/* Default exit sequence for state giveChange */
	private void exitSequence_main_region_Ready_r2_giveChange() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
	}
	
	/* Default exit sequence for state refund */
	private void exitSequence_main_region_refund() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_main_region_refund();
	}
	
	/* Default exit sequence for state clean */
	private void exitSequence_main_region_clean() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_main_region_clean();
	}
	
	/* Default exit sequence for state waitingTake */
	private void exitSequence_main_region_waitingTake() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state preparation */
	private void exitSequence_main_region_preparation() {
		exitSequence_main_region_preparation_r1();
		exitSequence_main_region_preparation_r2();
	}
	
	/* Default exit sequence for state drinkPreparation */
	private void exitSequence_main_region_preparation_r1_drinkPreparation() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_main_region_preparation_r1_drinkPreparation();
	}
	
	/* Default exit sequence for state progressBar */
	private void exitSequence_main_region_preparation_r2_progressBar() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
		
		exitAction_main_region_preparation_r2_progressBar();
	}
	
	/* Default exit sequence for state waittingStartPreparation */
	private void exitSequence_main_region_preparation_r2_waittingStartPreparation() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
	}
	
	/* Default exit sequence for region main region */
	private void exitSequence_main_region() {
		switch (stateVector[0]) {
		case main_region_Ready_r1_Timer:
			exitSequence_main_region_Ready_r1_Timer();
			break;
		case main_region_Ready_r1_waitingAction:
			exitSequence_main_region_Ready_r1_waitingAction();
			break;
		case main_region_refund:
			exitSequence_main_region_refund();
			break;
		case main_region_clean:
			exitSequence_main_region_clean();
			break;
		case main_region_waitingTake:
			exitSequence_main_region_waitingTake();
			break;
		case main_region_preparation_r1_drinkPreparation:
			exitSequence_main_region_preparation_r1_drinkPreparation();
			break;
		default:
			break;
		}
		
		switch (stateVector[1]) {
		case main_region_Ready_r2_ordering_r3_waitingSelection:
			exitSequence_main_region_Ready_r2_ordering_r3_waitingSelection();
			break;
		case main_region_Ready_r2_ordering_r3_selected:
			exitSequence_main_region_Ready_r2_ordering_r3_selected();
			break;
		case main_region_Ready_r2_giveChange:
			exitSequence_main_region_Ready_r2_giveChange();
			break;
		case main_region_preparation_r2_progressBar:
			exitSequence_main_region_preparation_r2_progressBar();
			break;
		case main_region_preparation_r2_waittingStartPreparation:
			exitSequence_main_region_preparation_r2_waittingStartPreparation();
			break;
		default:
			break;
		}
		
		switch (stateVector[2]) {
		case main_region_Ready_r2_ordering_r4_waitingPayment:
			exitSequence_main_region_Ready_r2_ordering_r4_waitingPayment();
			break;
		case main_region_Ready_r2_ordering_r4_paidByNFC:
			exitSequence_main_region_Ready_r2_ordering_r4_paidByNFC();
			break;
		case main_region_Ready_r2_ordering_r4_paidWithCoin:
			exitSequence_main_region_Ready_r2_ordering_r4_paidWithCoin();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r1 */
	private void exitSequence_main_region_Ready_r1() {
		switch (stateVector[0]) {
		case main_region_Ready_r1_Timer:
			exitSequence_main_region_Ready_r1_Timer();
			break;
		case main_region_Ready_r1_waitingAction:
			exitSequence_main_region_Ready_r1_waitingAction();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r2 */
	private void exitSequence_main_region_Ready_r2() {
		switch (stateVector[1]) {
		case main_region_Ready_r2_ordering_r3_waitingSelection:
			exitSequence_main_region_Ready_r2_ordering_r3_waitingSelection();
			break;
		case main_region_Ready_r2_ordering_r3_selected:
			exitSequence_main_region_Ready_r2_ordering_r3_selected();
			break;
		case main_region_Ready_r2_giveChange:
			exitSequence_main_region_Ready_r2_giveChange();
			break;
		default:
			break;
		}
		
		switch (stateVector[2]) {
		case main_region_Ready_r2_ordering_r4_waitingPayment:
			exitSequence_main_region_Ready_r2_ordering_r4_waitingPayment();
			break;
		case main_region_Ready_r2_ordering_r4_paidByNFC:
			exitSequence_main_region_Ready_r2_ordering_r4_paidByNFC();
			break;
		case main_region_Ready_r2_ordering_r4_paidWithCoin:
			exitSequence_main_region_Ready_r2_ordering_r4_paidWithCoin();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r3 */
	private void exitSequence_main_region_Ready_r2_ordering_r3() {
		switch (stateVector[1]) {
		case main_region_Ready_r2_ordering_r3_waitingSelection:
			exitSequence_main_region_Ready_r2_ordering_r3_waitingSelection();
			break;
		case main_region_Ready_r2_ordering_r3_selected:
			exitSequence_main_region_Ready_r2_ordering_r3_selected();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r4 */
	private void exitSequence_main_region_Ready_r2_ordering_r4() {
		switch (stateVector[2]) {
		case main_region_Ready_r2_ordering_r4_waitingPayment:
			exitSequence_main_region_Ready_r2_ordering_r4_waitingPayment();
			break;
		case main_region_Ready_r2_ordering_r4_paidByNFC:
			exitSequence_main_region_Ready_r2_ordering_r4_paidByNFC();
			break;
		case main_region_Ready_r2_ordering_r4_paidWithCoin:
			exitSequence_main_region_Ready_r2_ordering_r4_paidWithCoin();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r1 */
	private void exitSequence_main_region_preparation_r1() {
		switch (stateVector[0]) {
		case main_region_preparation_r1_drinkPreparation:
			exitSequence_main_region_preparation_r1_drinkPreparation();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r2 */
	private void exitSequence_main_region_preparation_r2() {
		switch (stateVector[1]) {
		case main_region_preparation_r2_progressBar:
			exitSequence_main_region_preparation_r2_progressBar();
			break;
		case main_region_preparation_r2_waittingStartPreparation:
			exitSequence_main_region_preparation_r2_waittingStartPreparation();
			break;
		default:
			break;
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region__entry_Default() {
		enterSequence_main_region_Ready_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_Ready_r1__entry_Default() {
		enterSequence_main_region_Ready_r1_waitingAction_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_Ready_r2_ordering_r3__entry_Default() {
		enterSequence_main_region_Ready_r2_ordering_r3_waitingSelection_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_Ready_r2_ordering_r4__entry_Default() {
		enterSequence_main_region_Ready_r2_ordering_r4_waitingPayment_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_Ready_r2__entry_Default() {
		enterSequence_main_region_Ready_r2_ordering_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_preparation_r1__entry_Default() {
		enterSequence_main_region_preparation_r1_drinkPreparation_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_preparation_r2__entry_Default() {
		enterSequence_main_region_preparation_r2_waittingStartPreparation_default();
	}
	
	private boolean react() {
		return false;
	}
	
	private boolean main_region_Ready_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			did_transition = false;
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean main_region_Ready_r1_Timer_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.doAction) {
				exitSequence_main_region_Ready_r1_Timer();
				enterSequence_main_region_Ready_r1_Timer_default();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			if (timeEvents[0]) {
				sCInterface.raiseCancel();
			}
		}
		return did_transition;
	}
	
	private boolean main_region_Ready_r1_waitingAction_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.selected) {
				exitSequence_main_region_Ready_r1_waitingAction();
				enterSequence_main_region_Ready_r1_Timer_default();
			} else {
				if (sCInterface.addCoin) {
					exitSequence_main_region_Ready_r1_waitingAction();
					enterSequence_main_region_Ready_r1_Timer_default();
				} else {
					if (sCInterface.paidNFC) {
						exitSequence_main_region_Ready_r1_waitingAction();
						enterSequence_main_region_Ready_r1_Timer_default();
					} else {
						if (sCInterface.addCup) {
							exitSequence_main_region_Ready_r1_waitingAction();
							enterSequence_main_region_Ready_r1_Timer_default();
						} else {
							did_transition = false;
						}
					}
				}
			}
		}
		return did_transition;
	}
	
	private boolean main_region_Ready_r2_ordering_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.cancel) {
				exitSequence_main_region_Ready();
				sCInterface.raiseDoRefund();
				
				enterSequence_main_region_refund_default();
				react();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = main_region_Ready_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_region_Ready_r2_ordering_r3_waitingSelection_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.selected) {
				exitSequence_main_region_Ready_r2_ordering_r3_waitingSelection();
				sCInterface.setIsSelected(true);
				
				enterSequence_main_region_Ready_r2_ordering_r3_selected_default();
			} else {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean main_region_Ready_r2_ordering_r3_selected_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.selected) {
				exitSequence_main_region_Ready_r2_ordering_r3_selected();
				enterSequence_main_region_Ready_r2_ordering_r3_selected_default();
			} else {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean main_region_Ready_r2_ordering_r4_waitingPayment_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.paidNFC) {
				exitSequence_main_region_Ready_r2_ordering_r4_waitingPayment();
				sCInterface.raiseDoPaymentByNFC();
				
				enterSequence_main_region_Ready_r2_ordering_r4_paidByNFC_default();
				main_region_Ready_r2_ordering_react(false);
			} else {
				if (sCInterface.addCoin) {
					exitSequence_main_region_Ready_r2_ordering_r4_waitingPayment();
					sCInterface.raiseAddedCoin();
					
					enterSequence_main_region_Ready_r2_ordering_r4_paidWithCoin_default();
					main_region_Ready_r2_ordering_react(false);
				} else {
					did_transition = false;
				}
			}
		}
		if (did_transition==false) {
			if (sCInterface.addCup) {
				sCInterface.raiseAddedCup();
			}
			did_transition = main_region_Ready_r2_ordering_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_region_Ready_r2_ordering_r4_paidByNFC_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.addCoin) {
				exitSequence_main_region_Ready_r2_ordering_r4_paidByNFC();
				sCInterface.raiseDoBackCoin();
				
				enterSequence_main_region_Ready_r2_ordering_r4_paidByNFC_default();
				main_region_Ready_r2_ordering_react(false);
			} else {
				if ((sCInterface.getIsSelected() && sCInterface.getIsValidate())) {
					exitSequence_main_region_Ready();
					enterSequence_main_region_preparation_default();
					react();
				} else {
					did_transition = false;
				}
			}
		}
		if (did_transition==false) {
			if (sCInterface.addCup) {
				sCInterface.raiseAddedCup();
			}
			did_transition = main_region_Ready_r2_ordering_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_region_Ready_r2_ordering_r4_paidWithCoin_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.addCoin) {
				exitSequence_main_region_Ready_r2_ordering_r4_paidWithCoin();
				sCInterface.raiseAddedCoin();
				
				enterSequence_main_region_Ready_r2_ordering_r4_paidWithCoin_default();
				main_region_Ready_r2_ordering_react(false);
			} else {
				if (((sCInterface.getIsPaid() && sCInterface.getIsSelected()) && sCInterface.getIsValidate())) {
					exitSequence_main_region_Ready_r2_ordering();
					sCInterface.raiseDoMoneyBack();
					
					enterSequence_main_region_Ready_r2_giveChange_default();
					main_region_Ready_react(false);
				} else {
					did_transition = false;
				}
			}
		}
		if (did_transition==false) {
			if (sCInterface.addCup) {
				sCInterface.raiseAddedCup();
			}
			did_transition = main_region_Ready_r2_ordering_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_region_Ready_r2_giveChange_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.moneyBack) {
				exitSequence_main_region_Ready();
				enterSequence_main_region_preparation_default();
				react();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = main_region_Ready_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_region_refund_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[1]) {
				exitSequence_main_region_refund();
				sCInterface.raiseDoRestart();
				
				enterSequence_main_region_Ready_default();
				react();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean main_region_clean_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[2]) {
				exitSequence_main_region_clean();
				sCInterface.raiseDoRestart();
				
				enterSequence_main_region_Ready_default();
				react();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean main_region_waitingTake_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.takeDrink) {
				exitSequence_main_region_waitingTake();
				sCInterface.raiseDoClean();
				
				enterSequence_main_region_clean_default();
				react();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean main_region_preparation_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			did_transition = false;
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean main_region_preparation_r1_drinkPreparation_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.preparationFinished) {
				exitSequence_main_region_preparation();
				sCInterface.raiseDoTakeDrink();
				
				enterSequence_main_region_waitingTake_default();
				react();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			if (timeEvents[3]) {
				sCInterface.raiseDoPreparation();
			}
		}
		return did_transition;
	}
	
	private boolean main_region_preparation_r2_progressBar_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			did_transition = false;
		}
		if (did_transition==false) {
			if (timeEvents[4]) {
				sCInterface.raiseIncreaseBar();
			}
			did_transition = main_region_preparation_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_region_preparation_r2_waittingStartPreparation_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.startBar) {
				exitSequence_main_region_preparation_r2_waittingStartPreparation();
				enterSequence_main_region_preparation_r2_progressBar_default();
				main_region_preparation_react(false);
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = main_region_preparation_react(try_transition);
		}
		return did_transition;
	}
	
}
