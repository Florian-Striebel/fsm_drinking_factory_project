/** Generated by YAKINDU Statechart Tools code generator. */
package fr.univcotedazur.polytech.si4.fsm.project.tea;

import java.util.LinkedList;
import java.util.Queue;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;

public class TeaStatemachine implements ITeaStatemachine {
	protected class SCInterfaceImpl implements SCInterface {
	
		private boolean teaBagIsPlaced;
		
		
		public void raiseTeaBagIsPlaced() {
			synchronized(TeaStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							teaBagIsPlaced = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean isHot;
		
		
		public void raiseIsHot() {
			synchronized(TeaStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							isHot = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean cupIsPlaced;
		
		
		public void raiseCupIsPlaced() {
			synchronized(TeaStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							cupIsPlaced = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean sugarFinishPoored;
		
		
		public void raiseSugarFinishPoored() {
			synchronized(TeaStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							sugarFinishPoored = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean drinkFinishPoored;
		
		
		public void raiseDrinkFinishPoored() {
			synchronized(TeaStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							drinkFinishPoored = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean drinkPickedUp;
		
		
		public void raiseDrinkPickedUp() {
			synchronized(TeaStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							drinkPickedUp = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean teaBagDropped;
		
		
		public void raiseTeaBagDropped() {
			synchronized(TeaStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							teaBagDropped = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean isInfused;
		
		
		public void raiseIsInfused() {
			synchronized(TeaStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							isInfused = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		protected void clearEvents() {
			teaBagIsPlaced = false;
			isHot = false;
			cupIsPlaced = false;
			sugarFinishPoored = false;
			drinkFinishPoored = false;
			drinkPickedUp = false;
			teaBagDropped = false;
			isInfused = false;
		}
	}
	
	
	protected SCInterfaceImpl sCInterface;
	
	private boolean initialized = false;
	
	public enum State {
		main_region_prepareIngredient,
		main_region_prepareIngredient_r1_positionningCup,
		main_region_prepareIngredient_r1_getTeaBag,
		main_region_prepareIngredient_r1__final_,
		main_region_prepareIngredient_r2_Heating,
		main_region_prepareIngredient_r2__final_,
		main_region_poorIngredient,
		main_region_poorIngredient_r1_poorSugar,
		main_region_poorIngredient_r1__final_,
		main_region_poorIngredient_r2_poorDrink,
		main_region_poorIngredient_r2__final_,
		main_region_DrinkDistribute,
		main_region__final_,
		main_region_brew,
		main_region_dropTeaBag,
		$NullState$
	};
	
	private final State[] stateVector = new State[2];
	
	private int nextStateIndex;
	
	private BlockingQueue<Runnable> inEventQueue = new LinkedBlockingQueue<Runnable>();
	private boolean isRunningCycle = false;
	public TeaStatemachine() {
		sCInterface = new SCInterfaceImpl();
	}
	
	public synchronized void init() {
		this.initialized = true;
		for (int i = 0; i < 2; i++) {
			stateVector[i] = State.$NullState$;
		}
		clearEvents();
		clearOutEvents();
	}
	
	public synchronized void enter() {
		if (!initialized) {
			throw new IllegalStateException(
				"The state machine needs to be initialized first by calling the init() function."
			);
		}
		enterSequence_main_region_default();
	}
	
	public synchronized void runCycle() {
		if (!initialized)
			throw new IllegalStateException(
					"The state machine needs to be initialized first by calling the init() function.");
		
		if (isRunningCycle) {
			return;
		}
		isRunningCycle = true;
		
		clearOutEvents();
	
		Runnable task = getNextEvent();
		if (task == null) {
			task = getDefaultEvent();
		}
		
		while (task != null) {
			task.run();
			clearEvents();
			task = getNextEvent();
		}
		
		isRunningCycle = false;
	}
	
	protected synchronized void singleCycle() {
		for (nextStateIndex = 0; nextStateIndex < stateVector.length; nextStateIndex++) {
			switch (stateVector[nextStateIndex]) {
			case main_region_prepareIngredient_r1_positionningCup:
				main_region_prepareIngredient_r1_positionningCup_react(true);
				break;
			case main_region_prepareIngredient_r1_getTeaBag:
				main_region_prepareIngredient_r1_getTeaBag_react(true);
				break;
			case main_region_prepareIngredient_r1__final_:
				main_region_prepareIngredient_r1__final__react(true);
				break;
			case main_region_prepareIngredient_r2_Heating:
				main_region_prepareIngredient_r2_Heating_react(true);
				break;
			case main_region_prepareIngredient_r2__final_:
				main_region_prepareIngredient_r2__final__react(true);
				break;
			case main_region_poorIngredient_r1_poorSugar:
				main_region_poorIngredient_r1_poorSugar_react(true);
				break;
			case main_region_poorIngredient_r1__final_:
				main_region_poorIngredient_r1__final__react(true);
				break;
			case main_region_poorIngredient_r2_poorDrink:
				main_region_poorIngredient_r2_poorDrink_react(true);
				break;
			case main_region_poorIngredient_r2__final_:
				main_region_poorIngredient_r2__final__react(true);
				break;
			case main_region_DrinkDistribute:
				main_region_DrinkDistribute_react(true);
				break;
			case main_region__final_:
				main_region__final__react(true);
				break;
			case main_region_brew:
				main_region_brew_react(true);
				break;
			case main_region_dropTeaBag:
				main_region_dropTeaBag_react(true);
				break;
			default:
				// $NullState$
			}
		}
	}
	
	protected Runnable getNextEvent() {
		if(!inEventQueue.isEmpty()) {
			return inEventQueue.poll();
		}
		return null;
	}
	
	protected Runnable getDefaultEvent() {
		return new Runnable() {
			@Override
			public void run() {
				singleCycle();
			}
		};
	}
	
	public synchronized void exit() {
		exitSequence_main_region();
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public synchronized boolean isActive() {
		return stateVector[0] != State.$NullState$||stateVector[1] != State.$NullState$;
	}
	
	/** 
	* @see IStatemachine#isFinal()
	*/
	public synchronized boolean isFinal() {
		return (stateVector[0] == State.main_region_prepareIngredient_r1__final_ || stateVector[0] == State.main_region_poorIngredient_r1__final_ || stateVector[0] == State.main_region__final_) && (stateVector[1] == State.main_region_prepareIngredient_r2__final_ || stateVector[1] == State.main_region_poorIngredient_r2__final_ || stateVector[1] == State.$NullState$);
	}
	/**
	* This method resets the incoming events (time events included).
	*/
	protected void clearEvents() {
		sCInterface.clearEvents();
	}
	
	/**
	* This method resets the outgoing events.
	*/
	protected void clearOutEvents() {
	}
	
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public synchronized boolean isStateActive(State state) {
	
		switch (state) {
		case main_region_prepareIngredient:
			return stateVector[0].ordinal() >= State.
					main_region_prepareIngredient.ordinal()&& stateVector[0].ordinal() <= State.main_region_prepareIngredient_r2__final_.ordinal();
		case main_region_prepareIngredient_r1_positionningCup:
			return stateVector[0] == State.main_region_prepareIngredient_r1_positionningCup;
		case main_region_prepareIngredient_r1_getTeaBag:
			return stateVector[0] == State.main_region_prepareIngredient_r1_getTeaBag;
		case main_region_prepareIngredient_r1__final_:
			return stateVector[0] == State.main_region_prepareIngredient_r1__final_;
		case main_region_prepareIngredient_r2_Heating:
			return stateVector[1] == State.main_region_prepareIngredient_r2_Heating;
		case main_region_prepareIngredient_r2__final_:
			return stateVector[1] == State.main_region_prepareIngredient_r2__final_;
		case main_region_poorIngredient:
			return stateVector[0].ordinal() >= State.
					main_region_poorIngredient.ordinal()&& stateVector[0].ordinal() <= State.main_region_poorIngredient_r2__final_.ordinal();
		case main_region_poorIngredient_r1_poorSugar:
			return stateVector[0] == State.main_region_poorIngredient_r1_poorSugar;
		case main_region_poorIngredient_r1__final_:
			return stateVector[0] == State.main_region_poorIngredient_r1__final_;
		case main_region_poorIngredient_r2_poorDrink:
			return stateVector[1] == State.main_region_poorIngredient_r2_poorDrink;
		case main_region_poorIngredient_r2__final_:
			return stateVector[1] == State.main_region_poorIngredient_r2__final_;
		case main_region_DrinkDistribute:
			return stateVector[0] == State.main_region_DrinkDistribute;
		case main_region__final_:
			return stateVector[0] == State.main_region__final_;
		case main_region_brew:
			return stateVector[0] == State.main_region_brew;
		case main_region_dropTeaBag:
			return stateVector[0] == State.main_region_dropTeaBag;
		default:
			return false;
		}
	}
	
	public SCInterface getSCInterface() {
		return sCInterface;
	}
	
	public synchronized void raiseTeaBagIsPlaced() {
		sCInterface.raiseTeaBagIsPlaced();
	}
	
	public synchronized void raiseIsHot() {
		sCInterface.raiseIsHot();
	}
	
	public synchronized void raiseCupIsPlaced() {
		sCInterface.raiseCupIsPlaced();
	}
	
	public synchronized void raiseSugarFinishPoored() {
		sCInterface.raiseSugarFinishPoored();
	}
	
	public synchronized void raiseDrinkFinishPoored() {
		sCInterface.raiseDrinkFinishPoored();
	}
	
	public synchronized void raiseDrinkPickedUp() {
		sCInterface.raiseDrinkPickedUp();
	}
	
	public synchronized void raiseTeaBagDropped() {
		sCInterface.raiseTeaBagDropped();
	}
	
	public synchronized void raiseIsInfused() {
		sCInterface.raiseIsInfused();
	}
	
	/* 'default' enter sequence for state prepareIngredient */
	private void enterSequence_main_region_prepareIngredient_default() {
		enterSequence_main_region_prepareIngredient_r1_default();
		enterSequence_main_region_prepareIngredient_r2_default();
	}
	
	/* 'default' enter sequence for state positionningCup */
	private void enterSequence_main_region_prepareIngredient_r1_positionningCup_default() {
		nextStateIndex = 0;
		stateVector[0] = State.main_region_prepareIngredient_r1_positionningCup;
	}
	
	/* 'default' enter sequence for state getTeaBag */
	private void enterSequence_main_region_prepareIngredient_r1_getTeaBag_default() {
		nextStateIndex = 0;
		stateVector[0] = State.main_region_prepareIngredient_r1_getTeaBag;
	}
	
	/* Default enter sequence for state null */
	private void enterSequence_main_region_prepareIngredient_r1__final__default() {
		nextStateIndex = 0;
		stateVector[0] = State.main_region_prepareIngredient_r1__final_;
	}
	
	/* 'default' enter sequence for state Heating */
	private void enterSequence_main_region_prepareIngredient_r2_Heating_default() {
		nextStateIndex = 1;
		stateVector[1] = State.main_region_prepareIngredient_r2_Heating;
	}
	
	/* Default enter sequence for state null */
	private void enterSequence_main_region_prepareIngredient_r2__final__default() {
		nextStateIndex = 1;
		stateVector[1] = State.main_region_prepareIngredient_r2__final_;
	}
	
	/* Default enter sequence for state null */
	private void enterSequence_main_region_poorIngredient_r1__final__default() {
		nextStateIndex = 0;
		stateVector[0] = State.main_region_poorIngredient_r1__final_;
	}
	
	/* Default enter sequence for state null */
	private void enterSequence_main_region_poorIngredient_r2__final__default() {
		nextStateIndex = 1;
		stateVector[1] = State.main_region_poorIngredient_r2__final_;
	}
	
	/* 'default' enter sequence for state DrinkDistribute */
	private void enterSequence_main_region_DrinkDistribute_default() {
		nextStateIndex = 0;
		stateVector[0] = State.main_region_DrinkDistribute;
	}
	
	/* Default enter sequence for state null */
	private void enterSequence_main_region__final__default() {
		nextStateIndex = 0;
		stateVector[0] = State.main_region__final_;
	}
	
	/* 'default' enter sequence for state brew */
	private void enterSequence_main_region_brew_default() {
		nextStateIndex = 0;
		stateVector[0] = State.main_region_brew;
	}
	
	/* 'default' enter sequence for state dropTeaBag */
	private void enterSequence_main_region_dropTeaBag_default() {
		nextStateIndex = 0;
		stateVector[0] = State.main_region_dropTeaBag;
	}
	
	/* 'default' enter sequence for region main region */
	private void enterSequence_main_region_default() {
		react_main_region__entry_Default();
	}
	
	/* 'default' enter sequence for region r1 */
	private void enterSequence_main_region_prepareIngredient_r1_default() {
		react_main_region_prepareIngredient_r1__entry_Default();
	}
	
	/* 'default' enter sequence for region r2 */
	private void enterSequence_main_region_prepareIngredient_r2_default() {
		react_main_region_prepareIngredient_r2__entry_Default();
	}
	
	/* Default exit sequence for state positionningCup */
	private void exitSequence_main_region_prepareIngredient_r1_positionningCup() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state getTeaBag */
	private void exitSequence_main_region_prepareIngredient_r1_getTeaBag() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for final state. */
	private void exitSequence_main_region_prepareIngredient_r1__final_() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state Heating */
	private void exitSequence_main_region_prepareIngredient_r2_Heating() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
	}
	
	/* Default exit sequence for final state. */
	private void exitSequence_main_region_prepareIngredient_r2__final_() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
	}
	
	/* Default exit sequence for state poorIngredient */
	private void exitSequence_main_region_poorIngredient() {
		exitSequence_main_region_poorIngredient_r1();
		exitSequence_main_region_poorIngredient_r2();
	}
	
	/* Default exit sequence for state poorSugar */
	private void exitSequence_main_region_poorIngredient_r1_poorSugar() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for final state. */
	private void exitSequence_main_region_poorIngredient_r1__final_() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state poorDrink */
	private void exitSequence_main_region_poorIngredient_r2_poorDrink() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
	}
	
	/* Default exit sequence for final state. */
	private void exitSequence_main_region_poorIngredient_r2__final_() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
	}
	
	/* Default exit sequence for state DrinkDistribute */
	private void exitSequence_main_region_DrinkDistribute() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for final state. */
	private void exitSequence_main_region__final_() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state brew */
	private void exitSequence_main_region_brew() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state dropTeaBag */
	private void exitSequence_main_region_dropTeaBag() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for region main region */
	private void exitSequence_main_region() {
		switch (stateVector[0]) {
		case main_region_prepareIngredient_r1_positionningCup:
			exitSequence_main_region_prepareIngredient_r1_positionningCup();
			break;
		case main_region_prepareIngredient_r1_getTeaBag:
			exitSequence_main_region_prepareIngredient_r1_getTeaBag();
			break;
		case main_region_prepareIngredient_r1__final_:
			exitSequence_main_region_prepareIngredient_r1__final_();
			break;
		case main_region_poorIngredient_r1_poorSugar:
			exitSequence_main_region_poorIngredient_r1_poorSugar();
			break;
		case main_region_poorIngredient_r1__final_:
			exitSequence_main_region_poorIngredient_r1__final_();
			break;
		case main_region_DrinkDistribute:
			exitSequence_main_region_DrinkDistribute();
			break;
		case main_region__final_:
			exitSequence_main_region__final_();
			break;
		case main_region_brew:
			exitSequence_main_region_brew();
			break;
		case main_region_dropTeaBag:
			exitSequence_main_region_dropTeaBag();
			break;
		default:
			break;
		}
		
		switch (stateVector[1]) {
		case main_region_prepareIngredient_r2_Heating:
			exitSequence_main_region_prepareIngredient_r2_Heating();
			break;
		case main_region_prepareIngredient_r2__final_:
			exitSequence_main_region_prepareIngredient_r2__final_();
			break;
		case main_region_poorIngredient_r2_poorDrink:
			exitSequence_main_region_poorIngredient_r2_poorDrink();
			break;
		case main_region_poorIngredient_r2__final_:
			exitSequence_main_region_poorIngredient_r2__final_();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r1 */
	private void exitSequence_main_region_poorIngredient_r1() {
		switch (stateVector[0]) {
		case main_region_poorIngredient_r1_poorSugar:
			exitSequence_main_region_poorIngredient_r1_poorSugar();
			break;
		case main_region_poorIngredient_r1__final_:
			exitSequence_main_region_poorIngredient_r1__final_();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r2 */
	private void exitSequence_main_region_poorIngredient_r2() {
		switch (stateVector[1]) {
		case main_region_poorIngredient_r2_poorDrink:
			exitSequence_main_region_poorIngredient_r2_poorDrink();
			break;
		case main_region_poorIngredient_r2__final_:
			exitSequence_main_region_poorIngredient_r2__final_();
			break;
		default:
			break;
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_prepareIngredient_r1__entry_Default() {
		enterSequence_main_region_prepareIngredient_r1_getTeaBag_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_prepareIngredient_r2__entry_Default() {
		enterSequence_main_region_prepareIngredient_r2_Heating_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region__entry_Default() {
		enterSequence_main_region_prepareIngredient_default();
	}
	
	private boolean react() {
		return false;
	}
	
	private boolean main_region_prepareIngredient_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			did_transition = false;
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean main_region_prepareIngredient_r1_positionningCup_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.cupIsPlaced) {
				exitSequence_main_region_prepareIngredient_r1_positionningCup();
				enterSequence_main_region_prepareIngredient_r1__final__default();
			} else {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean main_region_prepareIngredient_r1_getTeaBag_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.teaBagIsPlaced) {
				exitSequence_main_region_prepareIngredient_r1_getTeaBag();
				enterSequence_main_region_prepareIngredient_r1_positionningCup_default();
			} else {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean main_region_prepareIngredient_r1__final__react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			did_transition = false;
		}
		return did_transition;
	}
	
	private boolean main_region_prepareIngredient_r2_Heating_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.isHot) {
				exitSequence_main_region_prepareIngredient_r2_Heating();
				enterSequence_main_region_prepareIngredient_r2__final__default();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = main_region_prepareIngredient_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_region_prepareIngredient_r2__final__react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			did_transition = false;
		}
		if (did_transition==false) {
			did_transition = main_region_prepareIngredient_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_region_poorIngredient_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			exitSequence_main_region_poorIngredient();
			enterSequence_main_region_brew_default();
			react();
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean main_region_poorIngredient_r1_poorSugar_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.sugarFinishPoored) {
				exitSequence_main_region_poorIngredient_r1_poorSugar();
				enterSequence_main_region_poorIngredient_r1__final__default();
			} else {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean main_region_poorIngredient_r1__final__react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			did_transition = false;
		}
		return did_transition;
	}
	
	private boolean main_region_poorIngredient_r2_poorDrink_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.drinkFinishPoored) {
				exitSequence_main_region_poorIngredient_r2_poorDrink();
				enterSequence_main_region_poorIngredient_r2__final__default();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = main_region_poorIngredient_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_region_poorIngredient_r2__final__react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			did_transition = false;
		}
		if (did_transition==false) {
			did_transition = main_region_poorIngredient_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_region_DrinkDistribute_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.drinkPickedUp) {
				exitSequence_main_region_DrinkDistribute();
				enterSequence_main_region__final__default();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean main_region__final__react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			did_transition = false;
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean main_region_brew_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.isInfused) {
				exitSequence_main_region_brew();
				enterSequence_main_region_dropTeaBag_default();
				react();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean main_region_dropTeaBag_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.teaBagDropped) {
				exitSequence_main_region_dropTeaBag();
				enterSequence_main_region_DrinkDistribute_default();
				react();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
}
