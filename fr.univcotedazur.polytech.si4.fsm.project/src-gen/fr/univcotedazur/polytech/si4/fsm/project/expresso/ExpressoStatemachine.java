/** Generated by YAKINDU Statechart Tools code generator. */
package fr.univcotedazur.polytech.si4.fsm.project.expresso;

import fr.univcotedazur.polytech.si4.fsm.project.ITimer;
import fr.univcotedazur.polytech.si4.fsm.project.pooringredient.PoorIngredientStatemachine;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;

public class ExpressoStatemachine implements IExpressoStatemachine {
	protected class SCInterfaceImpl implements SCInterface {
	
		private List<SCInterfaceListener> listeners = new LinkedList<SCInterfaceListener>();
		
		public List<SCInterfaceListener> getListeners() {
			return listeners;
		}
		private boolean isHot;
		
		
		public void raiseIsHot() {
			synchronized(ExpressoStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							isHot = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean drinkPickedUp;
		
		
		public void raiseDrinkPickedUp() {
			synchronized(ExpressoStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							drinkPickedUp = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean prepare;
		
		
		public void raisePrepare() {
			synchronized(ExpressoStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							prepare = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean preparationFinished;
		
		
		public boolean isRaisedPreparationFinished() {
			synchronized(ExpressoStatemachine.this) {
				return preparationFinished;
			}
		}
		
		protected void raisePreparationFinished() {
			synchronized(ExpressoStatemachine.this) {
				preparationFinished = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onPreparationFinishedRaised();
				}
			}
		}
		
		private boolean grindingCoffee;
		
		
		public boolean isRaisedGrindingCoffee() {
			synchronized(ExpressoStatemachine.this) {
				return grindingCoffee;
			}
		}
		
		protected void raiseGrindingCoffee() {
			synchronized(ExpressoStatemachine.this) {
				grindingCoffee = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onGrindingCoffeeRaised();
				}
			}
		}
		
		private boolean groundingCoffee;
		
		
		public boolean isRaisedGroundingCoffee() {
			synchronized(ExpressoStatemachine.this) {
				return groundingCoffee;
			}
		}
		
		protected void raiseGroundingCoffee() {
			synchronized(ExpressoStatemachine.this) {
				groundingCoffee = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onGroundingCoffeeRaised();
				}
			}
		}
		
		private boolean placeCup;
		
		
		public boolean isRaisedPlaceCup() {
			synchronized(ExpressoStatemachine.this) {
				return placeCup;
			}
		}
		
		protected void raisePlaceCup() {
			synchronized(ExpressoStatemachine.this) {
				placeCup = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onPlaceCupRaised();
				}
			}
		}
		
		private boolean heating;
		
		
		public boolean isRaisedHeating() {
			synchronized(ExpressoStatemachine.this) {
				return heating;
			}
		}
		
		protected void raiseHeating() {
			synchronized(ExpressoStatemachine.this) {
				heating = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onHeatingRaised();
				}
			}
		}
		
		private PoorIngredientStatemachine poorI;
		
		public synchronized PoorIngredientStatemachine getPoorI() {
			synchronized(ExpressoStatemachine.this) {
				return poorI;
			}
		}
		
		public void setPoorI(PoorIngredientStatemachine value) {
			synchronized(ExpressoStatemachine.this) {
				this.poorI = value;
			}
		}
		
		protected void clearEvents() {
			isHot = false;
			drinkPickedUp = false;
			prepare = false;
		}
		protected void clearOutEvents() {
		
		preparationFinished = false;
		grindingCoffee = false;
		groundingCoffee = false;
		placeCup = false;
		heating = false;
		}
		
	}
	
	
	protected SCInterfaceImpl sCInterface;
	
	private boolean initialized = false;
	
	public enum State {
		main_region_PlacingPod,
		main_region_PlacingPod_r1_grindcoffee,
		main_region_PlacingPod_r1_Ingredient,
		main_region_PlacingPod_r1_Ingredient_r1_positionningCup,
		main_region_PlacingPod_r1_Ingredient_r1_cupPlaced,
		main_region_PlacingPod_r1_Ingredient_r2_groundCoffee,
		main_region_PlacingPod_r1_Ingredient_r2_coffeeGround,
		main_region_PlacingPod_r2_beginHeating,
		main_region_PlacingPod_r2_IsHot,
		main_region_expressoDistributed,
		main_region_Ready,
		main_region_pooringIngredients,
		$NullState$
	};
	
	private final State[] stateVector = new State[3];
	
	private int nextStateIndex;
	
	private ITimer timer;
	
	private final boolean[] timeEvents = new boolean[7];
	
	private BlockingQueue<Runnable> inEventQueue = new LinkedBlockingQueue<Runnable>();
	private boolean isRunningCycle = false;
	public ExpressoStatemachine() {
		sCInterface = new SCInterfaceImpl();
	}
	
	public synchronized void init() {
		this.initialized = true;
		if (timer == null) {
			throw new IllegalStateException("timer not set.");
		}
		for (int i = 0; i < 3; i++) {
			stateVector[i] = State.$NullState$;
		}
		clearEvents();
		clearOutEvents();
	}
	
	public synchronized void enter() {
		if (!initialized) {
			throw new IllegalStateException(
				"The state machine needs to be initialized first by calling the init() function."
			);
		}
		if (timer == null) {
			throw new IllegalStateException("timer not set.");
		}
		enterSequence_main_region_default();
	}
	
	public synchronized void runCycle() {
		if (!initialized)
			throw new IllegalStateException(
					"The state machine needs to be initialized first by calling the init() function.");
		
		if (isRunningCycle) {
			return;
		}
		isRunningCycle = true;
		
		clearOutEvents();
	
		Runnable task = getNextEvent();
		if (task == null) {
			task = getDefaultEvent();
		}
		
		while (task != null) {
			task.run();
			clearEvents();
			task = getNextEvent();
		}
		
		isRunningCycle = false;
	}
	
	protected synchronized void singleCycle() {
		for (nextStateIndex = 0; nextStateIndex < stateVector.length; nextStateIndex++) {
			switch (stateVector[nextStateIndex]) {
			case main_region_PlacingPod_r1_grindcoffee:
				main_region_PlacingPod_r1_grindcoffee_react(true);
				break;
			case main_region_PlacingPod_r1_Ingredient_r1_positionningCup:
				main_region_PlacingPod_r1_Ingredient_r1_positionningCup_react(true);
				break;
			case main_region_PlacingPod_r1_Ingredient_r1_cupPlaced:
				main_region_PlacingPod_r1_Ingredient_r1_cupPlaced_react(true);
				break;
			case main_region_PlacingPod_r1_Ingredient_r2_groundCoffee:
				main_region_PlacingPod_r1_Ingredient_r2_groundCoffee_react(true);
				break;
			case main_region_PlacingPod_r1_Ingredient_r2_coffeeGround:
				main_region_PlacingPod_r1_Ingredient_r2_coffeeGround_react(true);
				break;
			case main_region_PlacingPod_r2_beginHeating:
				main_region_PlacingPod_r2_beginHeating_react(true);
				break;
			case main_region_PlacingPod_r2_IsHot:
				main_region_PlacingPod_r2_IsHot_react(true);
				break;
			case main_region_expressoDistributed:
				main_region_expressoDistributed_react(true);
				break;
			case main_region_Ready:
				main_region_Ready_react(true);
				break;
			case main_region_pooringIngredients:
				main_region_pooringIngredients_react(true);
				break;
			default:
				// $NullState$
			}
		}
	}
	
	protected Runnable getNextEvent() {
		if(!inEventQueue.isEmpty()) {
			return inEventQueue.poll();
		}
		return null;
	}
	
	protected Runnable getDefaultEvent() {
		return new Runnable() {
			@Override
			public void run() {
				singleCycle();
			}
		};
	}
	
	public synchronized void exit() {
		exitSequence_main_region();
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public synchronized boolean isActive() {
		return stateVector[0] != State.$NullState$||stateVector[1] != State.$NullState$||stateVector[2] != State.$NullState$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public synchronized boolean isFinal() {
		return false;
	}
	/**
	* This method resets the incoming events (time events included).
	*/
	protected void clearEvents() {
		sCInterface.clearEvents();
		for (int i=0; i<timeEvents.length; i++) {
			timeEvents[i] = false;
		}
	}
	
	/**
	* This method resets the outgoing events.
	*/
	protected void clearOutEvents() {
		sCInterface.clearOutEvents();
	}
	
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public synchronized boolean isStateActive(State state) {
	
		switch (state) {
		case main_region_PlacingPod:
			return stateVector[0].ordinal() >= State.
					main_region_PlacingPod.ordinal()&& stateVector[0].ordinal() <= State.main_region_PlacingPod_r2_IsHot.ordinal();
		case main_region_PlacingPod_r1_grindcoffee:
			return stateVector[0] == State.main_region_PlacingPod_r1_grindcoffee;
		case main_region_PlacingPod_r1_Ingredient:
			return stateVector[0].ordinal() >= State.
					main_region_PlacingPod_r1_Ingredient.ordinal()&& stateVector[0].ordinal() <= State.main_region_PlacingPod_r1_Ingredient_r2_coffeeGround.ordinal();
		case main_region_PlacingPod_r1_Ingredient_r1_positionningCup:
			return stateVector[0] == State.main_region_PlacingPod_r1_Ingredient_r1_positionningCup;
		case main_region_PlacingPod_r1_Ingredient_r1_cupPlaced:
			return stateVector[0] == State.main_region_PlacingPod_r1_Ingredient_r1_cupPlaced;
		case main_region_PlacingPod_r1_Ingredient_r2_groundCoffee:
			return stateVector[1] == State.main_region_PlacingPod_r1_Ingredient_r2_groundCoffee;
		case main_region_PlacingPod_r1_Ingredient_r2_coffeeGround:
			return stateVector[1] == State.main_region_PlacingPod_r1_Ingredient_r2_coffeeGround;
		case main_region_PlacingPod_r2_beginHeating:
			return stateVector[2] == State.main_region_PlacingPod_r2_beginHeating;
		case main_region_PlacingPod_r2_IsHot:
			return stateVector[2] == State.main_region_PlacingPod_r2_IsHot;
		case main_region_expressoDistributed:
			return stateVector[0] == State.main_region_expressoDistributed;
		case main_region_Ready:
			return stateVector[0] == State.main_region_Ready;
		case main_region_pooringIngredients:
			return stateVector[0] == State.main_region_pooringIngredients;
		default:
			return false;
		}
	}
	
	/**
	* Set the {@link ITimer} for the state machine. It must be set
	* externally on a timed state machine before a run cycle can be correctly
	* executed.
	* 
	* @param timer
	*/
	public synchronized void setTimer(ITimer timer) {
		this.timer = timer;
	}
	
	/**
	* Returns the currently used timer.
	* 
	* @return {@link ITimer}
	*/
	public ITimer getTimer() {
		return timer;
	}
	
	public synchronized void timeElapsed(int eventID) {
		inEventQueue.add(new Runnable() {
			@Override
			public void run() {
				timeEvents[eventID] = true;
				singleCycle();
			}
		});
		runCycle();
	}
	
	public SCInterface getSCInterface() {
		return sCInterface;
	}
	
	public synchronized void raiseIsHot() {
		sCInterface.raiseIsHot();
	}
	
	public synchronized void raiseDrinkPickedUp() {
		sCInterface.raiseDrinkPickedUp();
	}
	
	public synchronized void raisePrepare() {
		sCInterface.raisePrepare();
	}
	
	public synchronized boolean isRaisedPreparationFinished() {
		return sCInterface.isRaisedPreparationFinished();
	}
	
	public synchronized boolean isRaisedGrindingCoffee() {
		return sCInterface.isRaisedGrindingCoffee();
	}
	
	public synchronized boolean isRaisedGroundingCoffee() {
		return sCInterface.isRaisedGroundingCoffee();
	}
	
	public synchronized boolean isRaisedPlaceCup() {
		return sCInterface.isRaisedPlaceCup();
	}
	
	public synchronized boolean isRaisedHeating() {
		return sCInterface.isRaisedHeating();
	}
	
	public synchronized PoorIngredientStatemachine getPoorI() {
		return sCInterface.getPoorI();
	}
	
	public synchronized void setPoorI(PoorIngredientStatemachine value) {
		sCInterface.setPoorI(value);
	}
	
	/* Entry action for state 'grindcoffee'. */
	private void entryAction_main_region_PlacingPod_r1_grindcoffee() {
		timer.setTimer(this, 0, (3 * 1000), false);
		
		sCInterface.raiseGrindingCoffee();
	}
	
	/* Entry action for state 'positionningCup'. */
	private void entryAction_main_region_PlacingPod_r1_Ingredient_r1_positionningCup() {
		timer.setTimer(this, 1, (2 * 1000), false);
		
		sCInterface.raisePlaceCup();
	}
	
	/* Entry action for state 'groundCoffee'. */
	private void entryAction_main_region_PlacingPod_r1_Ingredient_r2_groundCoffee() {
		timer.setTimer(this, 2, (1 * 1000), false);
		
		sCInterface.raiseGroundingCoffee();
	}
	
	/* Entry action for state 'coffeeGround'. */
	private void entryAction_main_region_PlacingPod_r1_Ingredient_r2_coffeeGround() {
		timer.setTimer(this, 3, 100, true);
	}
	
	/* Entry action for state 'beginHeating'. */
	private void entryAction_main_region_PlacingPod_r2_beginHeating() {
		sCInterface.raiseHeating();
	}
	
	/* Entry action for state 'IsHot'. */
	private void entryAction_main_region_PlacingPod_r2_IsHot() {
		timer.setTimer(this, 4, 100, true);
	}
	
	/* Entry action for state 'expressoDistributed'. */
	private void entryAction_main_region_expressoDistributed() {
		timer.setTimer(this, 5, 100, false);
		
		sCInterface.raisePreparationFinished();
	}
	
	/* Entry action for state 'pooringIngredients'. */
	private void entryAction_main_region_pooringIngredients() {
		timer.setTimer(this, 6, 100, true);
		
		sCInterface.getPoorI().enter();
	}
	
	/* Exit action for state 'grindcoffee'. */
	private void exitAction_main_region_PlacingPod_r1_grindcoffee() {
		timer.unsetTimer(this, 0);
	}
	
	/* Exit action for state 'positionningCup'. */
	private void exitAction_main_region_PlacingPod_r1_Ingredient_r1_positionningCup() {
		timer.unsetTimer(this, 1);
	}
	
	/* Exit action for state 'groundCoffee'. */
	private void exitAction_main_region_PlacingPod_r1_Ingredient_r2_groundCoffee() {
		timer.unsetTimer(this, 2);
	}
	
	/* Exit action for state 'coffeeGround'. */
	private void exitAction_main_region_PlacingPod_r1_Ingredient_r2_coffeeGround() {
		timer.unsetTimer(this, 3);
	}
	
	/* Exit action for state 'IsHot'. */
	private void exitAction_main_region_PlacingPod_r2_IsHot() {
		timer.unsetTimer(this, 4);
	}
	
	/* Exit action for state 'expressoDistributed'. */
	private void exitAction_main_region_expressoDistributed() {
		timer.unsetTimer(this, 5);
	}
	
	/* Exit action for state 'pooringIngredients'. */
	private void exitAction_main_region_pooringIngredients() {
		timer.unsetTimer(this, 6);
		
		sCInterface.getPoorI().exit();
	}
	
	/* 'default' enter sequence for state PlacingPod */
	private void enterSequence_main_region_PlacingPod_default() {
		enterSequence_main_region_PlacingPod_r1_default();
		enterSequence_main_region_PlacingPod_r2_default();
	}
	
	/* 'default' enter sequence for state grindcoffee */
	private void enterSequence_main_region_PlacingPod_r1_grindcoffee_default() {
		entryAction_main_region_PlacingPod_r1_grindcoffee();
		nextStateIndex = 0;
		stateVector[0] = State.main_region_PlacingPod_r1_grindcoffee;
	}
	
	/* 'default' enter sequence for state Ingredient */
	private void enterSequence_main_region_PlacingPod_r1_Ingredient_default() {
		enterSequence_main_region_PlacingPod_r1_Ingredient_r1_default();
		enterSequence_main_region_PlacingPod_r1_Ingredient_r2_default();
	}
	
	/* 'default' enter sequence for state positionningCup */
	private void enterSequence_main_region_PlacingPod_r1_Ingredient_r1_positionningCup_default() {
		entryAction_main_region_PlacingPod_r1_Ingredient_r1_positionningCup();
		nextStateIndex = 0;
		stateVector[0] = State.main_region_PlacingPod_r1_Ingredient_r1_positionningCup;
	}
	
	/* 'default' enter sequence for state cupPlaced */
	private void enterSequence_main_region_PlacingPod_r1_Ingredient_r1_cupPlaced_default() {
		nextStateIndex = 0;
		stateVector[0] = State.main_region_PlacingPod_r1_Ingredient_r1_cupPlaced;
	}
	
	/* 'default' enter sequence for state groundCoffee */
	private void enterSequence_main_region_PlacingPod_r1_Ingredient_r2_groundCoffee_default() {
		entryAction_main_region_PlacingPod_r1_Ingredient_r2_groundCoffee();
		nextStateIndex = 1;
		stateVector[1] = State.main_region_PlacingPod_r1_Ingredient_r2_groundCoffee;
	}
	
	/* 'default' enter sequence for state coffeeGround */
	private void enterSequence_main_region_PlacingPod_r1_Ingredient_r2_coffeeGround_default() {
		entryAction_main_region_PlacingPod_r1_Ingredient_r2_coffeeGround();
		nextStateIndex = 1;
		stateVector[1] = State.main_region_PlacingPod_r1_Ingredient_r2_coffeeGround;
	}
	
	/* 'default' enter sequence for state beginHeating */
	private void enterSequence_main_region_PlacingPod_r2_beginHeating_default() {
		entryAction_main_region_PlacingPod_r2_beginHeating();
		nextStateIndex = 2;
		stateVector[2] = State.main_region_PlacingPod_r2_beginHeating;
	}
	
	/* 'default' enter sequence for state IsHot */
	private void enterSequence_main_region_PlacingPod_r2_IsHot_default() {
		entryAction_main_region_PlacingPod_r2_IsHot();
		nextStateIndex = 2;
		stateVector[2] = State.main_region_PlacingPod_r2_IsHot;
	}
	
	/* 'default' enter sequence for state expressoDistributed */
	private void enterSequence_main_region_expressoDistributed_default() {
		entryAction_main_region_expressoDistributed();
		nextStateIndex = 0;
		stateVector[0] = State.main_region_expressoDistributed;
	}
	
	/* 'default' enter sequence for state Ready */
	private void enterSequence_main_region_Ready_default() {
		nextStateIndex = 0;
		stateVector[0] = State.main_region_Ready;
	}
	
	/* 'default' enter sequence for state pooringIngredients */
	private void enterSequence_main_region_pooringIngredients_default() {
		entryAction_main_region_pooringIngredients();
		nextStateIndex = 0;
		stateVector[0] = State.main_region_pooringIngredients;
	}
	
	/* 'default' enter sequence for region main region */
	private void enterSequence_main_region_default() {
		react_main_region__entry_Default();
	}
	
	/* 'default' enter sequence for region r1 */
	private void enterSequence_main_region_PlacingPod_r1_default() {
		react_main_region_PlacingPod_r1__entry_Default();
	}
	
	/* 'default' enter sequence for region r1 */
	private void enterSequence_main_region_PlacingPod_r1_Ingredient_r1_default() {
		react_main_region_PlacingPod_r1_Ingredient_r1__entry_Default();
	}
	
	/* 'default' enter sequence for region r2 */
	private void enterSequence_main_region_PlacingPod_r1_Ingredient_r2_default() {
		react_main_region_PlacingPod_r1_Ingredient_r2__entry_Default();
	}
	
	/* 'default' enter sequence for region r2 */
	private void enterSequence_main_region_PlacingPod_r2_default() {
		react_main_region_PlacingPod_r2__entry_Default();
	}
	
	/* Default exit sequence for state PlacingPod */
	private void exitSequence_main_region_PlacingPod() {
		exitSequence_main_region_PlacingPod_r1();
		exitSequence_main_region_PlacingPod_r2();
	}
	
	/* Default exit sequence for state grindcoffee */
	private void exitSequence_main_region_PlacingPod_r1_grindcoffee() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_main_region_PlacingPod_r1_grindcoffee();
	}
	
	/* Default exit sequence for state Ingredient */
	private void exitSequence_main_region_PlacingPod_r1_Ingredient() {
		exitSequence_main_region_PlacingPod_r1_Ingredient_r1();
		exitSequence_main_region_PlacingPod_r1_Ingredient_r2();
	}
	
	/* Default exit sequence for state positionningCup */
	private void exitSequence_main_region_PlacingPod_r1_Ingredient_r1_positionningCup() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_main_region_PlacingPod_r1_Ingredient_r1_positionningCup();
	}
	
	/* Default exit sequence for state cupPlaced */
	private void exitSequence_main_region_PlacingPod_r1_Ingredient_r1_cupPlaced() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state groundCoffee */
	private void exitSequence_main_region_PlacingPod_r1_Ingredient_r2_groundCoffee() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
		
		exitAction_main_region_PlacingPod_r1_Ingredient_r2_groundCoffee();
	}
	
	/* Default exit sequence for state coffeeGround */
	private void exitSequence_main_region_PlacingPod_r1_Ingredient_r2_coffeeGround() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
		
		exitAction_main_region_PlacingPod_r1_Ingredient_r2_coffeeGround();
	}
	
	/* Default exit sequence for state beginHeating */
	private void exitSequence_main_region_PlacingPod_r2_beginHeating() {
		nextStateIndex = 2;
		stateVector[2] = State.$NullState$;
	}
	
	/* Default exit sequence for state IsHot */
	private void exitSequence_main_region_PlacingPod_r2_IsHot() {
		nextStateIndex = 2;
		stateVector[2] = State.$NullState$;
		
		exitAction_main_region_PlacingPod_r2_IsHot();
	}
	
	/* Default exit sequence for state expressoDistributed */
	private void exitSequence_main_region_expressoDistributed() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_main_region_expressoDistributed();
	}
	
	/* Default exit sequence for state Ready */
	private void exitSequence_main_region_Ready() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state pooringIngredients */
	private void exitSequence_main_region_pooringIngredients() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_main_region_pooringIngredients();
	}
	
	/* Default exit sequence for region main region */
	private void exitSequence_main_region() {
		switch (stateVector[0]) {
		case main_region_PlacingPod_r1_grindcoffee:
			exitSequence_main_region_PlacingPod_r1_grindcoffee();
			break;
		case main_region_PlacingPod_r1_Ingredient_r1_positionningCup:
			exitSequence_main_region_PlacingPod_r1_Ingredient_r1_positionningCup();
			break;
		case main_region_PlacingPod_r1_Ingredient_r1_cupPlaced:
			exitSequence_main_region_PlacingPod_r1_Ingredient_r1_cupPlaced();
			break;
		case main_region_expressoDistributed:
			exitSequence_main_region_expressoDistributed();
			break;
		case main_region_Ready:
			exitSequence_main_region_Ready();
			break;
		case main_region_pooringIngredients:
			exitSequence_main_region_pooringIngredients();
			break;
		default:
			break;
		}
		
		switch (stateVector[1]) {
		case main_region_PlacingPod_r1_Ingredient_r2_groundCoffee:
			exitSequence_main_region_PlacingPod_r1_Ingredient_r2_groundCoffee();
			break;
		case main_region_PlacingPod_r1_Ingredient_r2_coffeeGround:
			exitSequence_main_region_PlacingPod_r1_Ingredient_r2_coffeeGround();
			break;
		default:
			break;
		}
		
		switch (stateVector[2]) {
		case main_region_PlacingPod_r2_beginHeating:
			exitSequence_main_region_PlacingPod_r2_beginHeating();
			break;
		case main_region_PlacingPod_r2_IsHot:
			exitSequence_main_region_PlacingPod_r2_IsHot();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r1 */
	private void exitSequence_main_region_PlacingPod_r1() {
		switch (stateVector[0]) {
		case main_region_PlacingPod_r1_grindcoffee:
			exitSequence_main_region_PlacingPod_r1_grindcoffee();
			break;
		case main_region_PlacingPod_r1_Ingredient_r1_positionningCup:
			exitSequence_main_region_PlacingPod_r1_Ingredient_r1_positionningCup();
			break;
		case main_region_PlacingPod_r1_Ingredient_r1_cupPlaced:
			exitSequence_main_region_PlacingPod_r1_Ingredient_r1_cupPlaced();
			break;
		default:
			break;
		}
		
		switch (stateVector[1]) {
		case main_region_PlacingPod_r1_Ingredient_r2_groundCoffee:
			exitSequence_main_region_PlacingPod_r1_Ingredient_r2_groundCoffee();
			break;
		case main_region_PlacingPod_r1_Ingredient_r2_coffeeGround:
			exitSequence_main_region_PlacingPod_r1_Ingredient_r2_coffeeGround();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r1 */
	private void exitSequence_main_region_PlacingPod_r1_Ingredient_r1() {
		switch (stateVector[0]) {
		case main_region_PlacingPod_r1_Ingredient_r1_positionningCup:
			exitSequence_main_region_PlacingPod_r1_Ingredient_r1_positionningCup();
			break;
		case main_region_PlacingPod_r1_Ingredient_r1_cupPlaced:
			exitSequence_main_region_PlacingPod_r1_Ingredient_r1_cupPlaced();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r2 */
	private void exitSequence_main_region_PlacingPod_r1_Ingredient_r2() {
		switch (stateVector[1]) {
		case main_region_PlacingPod_r1_Ingredient_r2_groundCoffee:
			exitSequence_main_region_PlacingPod_r1_Ingredient_r2_groundCoffee();
			break;
		case main_region_PlacingPod_r1_Ingredient_r2_coffeeGround:
			exitSequence_main_region_PlacingPod_r1_Ingredient_r2_coffeeGround();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r2 */
	private void exitSequence_main_region_PlacingPod_r2() {
		switch (stateVector[2]) {
		case main_region_PlacingPod_r2_beginHeating:
			exitSequence_main_region_PlacingPod_r2_beginHeating();
			break;
		case main_region_PlacingPod_r2_IsHot:
			exitSequence_main_region_PlacingPod_r2_IsHot();
			break;
		default:
			break;
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region__entry_Default() {
		enterSequence_main_region_Ready_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_PlacingPod_r1__entry_Default() {
		enterSequence_main_region_PlacingPod_r1_grindcoffee_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_PlacingPod_r1_Ingredient_r1__entry_Default() {
		enterSequence_main_region_PlacingPod_r1_Ingredient_r1_positionningCup_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_PlacingPod_r1_Ingredient_r2__entry_Default() {
		enterSequence_main_region_PlacingPod_r1_Ingredient_r2_groundCoffee_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_PlacingPod_r2__entry_Default() {
		enterSequence_main_region_PlacingPod_r2_beginHeating_default();
	}
	
	/* The reactions of state null. */
	private void react_main_region_PlacingPod_r1__sync0() {
		exitSequence_main_region_PlacingPod();
		react_main_region__sync0();
	}
	
	/* The reactions of state null. */
	private void react_main_region__sync0() {
		enterSequence_main_region_pooringIngredients_default();
	}
	
	private boolean react() {
		return false;
	}
	
	private boolean main_region_PlacingPod_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			did_transition = false;
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean main_region_PlacingPod_r1_grindcoffee_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[0]) {
				exitSequence_main_region_PlacingPod_r1_grindcoffee();
				enterSequence_main_region_PlacingPod_r1_Ingredient_default();
			} else {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean main_region_PlacingPod_r1_Ingredient_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			did_transition = false;
		}
		return did_transition;
	}
	
	private boolean main_region_PlacingPod_r1_Ingredient_r1_positionningCup_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[1]) {
				exitSequence_main_region_PlacingPod_r1_Ingredient_r1_positionningCup();
				enterSequence_main_region_PlacingPod_r1_Ingredient_r1_cupPlaced_default();
			} else {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean main_region_PlacingPod_r1_Ingredient_r1_cupPlaced_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (((true && isStateActive(State.main_region_PlacingPod_r1_Ingredient_r2_coffeeGround)) && timeEvents[3])) {
				exitSequence_main_region_PlacingPod_r1_Ingredient();
				react_main_region_PlacingPod_r1__sync0();
			} else {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean main_region_PlacingPod_r1_Ingredient_r2_groundCoffee_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[2]) {
				exitSequence_main_region_PlacingPod_r1_Ingredient_r2_groundCoffee();
				enterSequence_main_region_PlacingPod_r1_Ingredient_r2_coffeeGround_default();
				main_region_PlacingPod_r1_Ingredient_react(false);
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = main_region_PlacingPod_r1_Ingredient_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_region_PlacingPod_r1_Ingredient_r2_coffeeGround_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (((timeEvents[3] && isStateActive(State.main_region_PlacingPod_r1_Ingredient_r1_cupPlaced)) && true)) {
				exitSequence_main_region_PlacingPod_r1_Ingredient();
				react_main_region_PlacingPod_r1__sync0();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = main_region_PlacingPod_r1_Ingredient_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_region_PlacingPod_r2_beginHeating_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.isHot) {
				exitSequence_main_region_PlacingPod_r2_beginHeating();
				enterSequence_main_region_PlacingPod_r2_IsHot_default();
				main_region_PlacingPod_react(false);
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = main_region_PlacingPod_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_region_PlacingPod_r2_IsHot_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[4]) {
				exitSequence_main_region_PlacingPod();
				react_main_region__sync0();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = main_region_PlacingPod_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_region_expressoDistributed_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[5]) {
				exitSequence_main_region_expressoDistributed();
				enterSequence_main_region_Ready_default();
				react();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean main_region_Ready_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.prepare) {
				exitSequence_main_region_Ready();
				enterSequence_main_region_PlacingPod_default();
				react();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean main_region_pooringIngredients_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.getPoorI().isFinal()) {
				exitSequence_main_region_pooringIngredients();
				enterSequence_main_region_expressoDistributed_default();
				react();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			if (timeEvents[6]) {
				sCInterface.getPoorI().runCycle();
			}
			did_transition = react();
		}
		return did_transition;
	}
	
}
